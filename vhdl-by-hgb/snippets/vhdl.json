{
    "Bit": {
        "prefix": "bit",
        "body": [
            "bit$0"
        ],
        "description": "bit"
    },
    "Bit Vector": {
        "prefix": "bitvec",
        "body": [
            "bit_vector$0"
        ],
        "description": "bit_vector"
    },
    "Bit Vector Declaration": {
        "prefix": "bitvecdec",
        "body": [
            "std_logic_vector($1 ${2|downto,to|} $3)${4| := (others => '0');,;|}$0"
        ],
        "description": "bit_vector declaration"
    },
    "Conv To Integer": {
        "prefix": "to_int",
        "body": "to_integer(${1:input})",
        "description": "conv numeric to integer"
    },
    "Conv To Std_Logic_Vector": {
        "prefix": "logic_to_stdlv",
        "body": "std_logic_vector(${1:input})",
        "description": "conv logic arith to std_logic_vector"
    },
    "Conv Int To Signed": {
        "prefix": "int_to_sign",
        "body": "to_signed(${1:input}, ${2:output}'length)",
        "description": "conv from int to sign"
    },
    "Conv Int To Std_Logic_Vector Signed": {
        "prefix": "int_to_stdlv",
        "body": "std_logic_vector(to_signed(${1:input}, ${2:output}'length));",
        "description": "conv sign numeric to std_logic_vector"
    },
    "Conv Int To Std_Logic_Vector Unsigned": {
        "prefix": "int_to_unsign_stdlv",
        "body": "std_logic_vector(to_unsigned(${1:input}, ${2:output}'length));",
        "description": "conv unsign numeric to std_logic_vector"
    },
    "Conv Int To Unsigned": {
        "prefix": "int_to_unsign",
        "body": "to_unsigned(${1:input}, ${2:output}'length)",
        "description": "conv from int to unsign"
    },
    "Conv Std_Logic_Vector Signed To Integer": {
        "prefix": "stdlv_to_int",
        "body": "conv_integer(signed(${1:input}));",
        "description": "conv std_logic_vector sign to int"
    },
    "Conv Std_Logic_Vector Unsigned To Integer": {
        "prefix": "stdlv_unsign_to_int",
        "body": "conv_integer(unsigned(${1:input}));",
        "description": "conv std_logic_vector unsign to int"
    },
    "Conv Std_Logic_Vector To Signed": {
        "prefix": "stdlv_to_sign",
        "body": "to_signed(${1:input})",
        "description": "conv std_logic_vector to sign"
    },
    "Conv Std_Logic_Vector To Unsigned": {
        "prefix": "stdlv_to_unsign",
        "body": "to_unsigned(${1:input})",
        "description": "conv std_logic_vector to unsign"
    },
    "Conv Signed To Integer": {
        "prefix": "sign_to_int",
        "body": "conv_integer(${1:input})",
        "description": "conv sign to int"
    },
    "Conv Signed To Unsigned": {
        "prefix": "sign_to_unsign",
        "body": "unsigned(${1:input})",
        "description": "conv sign to unsign"
    },
    "Conv Unsigned To Signed": {
        "prefix": "unsign_to_sign",
        "body": "signed(${1:input})",
        "description": "conv unsign to sign"
    },
    "Conv to Std_Logic_Vector": {
        "prefix": "to_stdlv",
        "body": "To_StdLogicVector(${1:input})",
        "description": "conv std_logic_vector"
    },
    "Conv to Std_ULogic_Vector": {
        "prefix": "to_stdulv",
        "body": "To_StdULogicVector(${1:input})",
        "description": "conv std_ulogic_vector"
    },
    "Conv Bit to Std_ULogic": {
        "prefix": "bit_to_stdu",
        "body": "To_StdULogic(${1:input})",
        "description": "conv bit to std_ulogic"
    },
    "Conv Std_ULogic to Bit": {
        "prefix": "stdul_to_bit",
        "body": "To_bit(${1:input})",
        "description": "conv std_logic to bit"
    },
    "Conv std_ulogic_vector to Bitvector": {
        "prefix": "stdulv_to_bitvec",
        "body": "To_bitvector(${1:input})",
        "description": "conv bitvec to std_ulogic_vector"
    },
    "Decrement": {
        "prefix": "dec",
        "body": [
            "${1:cnt} <= ${1:cnt} - 1;",
            "$0"
        ],
        "description": "decrement a signal"
    },
    "Entityinstantiation": {
        "prefix": "entityinst",
        "body": [
            "${1:entity}_inst: entity work.$1",
			"\tgeneric map(",
			"\t\t${2:<generics>)}",
            "\tport map(",
            "\t\t${3:<ports>}",
            "\t);",
			"$0"
        ],
        "description": "entity instantiation"
    },
    "Enumerate": {
        "prefix": "enum",
        "body": [
            "type ${1:<name>} is (${2:<state>});",
            "\t$0"
        ],
        "description": "enumerate declaration"
    },
    "Falling Edge": {
        "prefix": "fall",
        "body": "falling_edge(${1:iClk})$0",
        "description": "falling edge"
    },
    "FSM example generate": {
        "prefix": "fsm",
        "body": [
            "process (${1:iClk})",
            "begin",
            "\tif ${2|rigins_edge,falling_edge|}($1) then",
            "\t\t$0",
            "\t\tcase ${3:sel} is",
            "\t\t\twhen ${4:sel} =>",
            "\t\t\t\t$3 <= $5;",
            "\t\t\t\t",
            "\t\t\twhen ${5:sel} =>",
            "\t\t\t\t$3 <= $4;",
            "\t\t\t\t",
            "\t\t\twhen others =>",
            "\t\t\t\t$3 <= $4;",
            "\t\tend case;",
            "\tend if;",
            "end process;"
        ],
        "description": "case statement"
    },
    "Headerkommentar": {
        "prefix": "header",
        "body": [
            "------------------------------------------------------------------------",
            "-- Title       : ${1:<Title>}",
            "-- File        : $TM_FILENAME_BASE",
            "-- Author      : ${2:<Author>}",
            "-- Date        : ${3:<Date>}",
            "-- Review      : ${4:<Review>}",
            "------------------------------------------------------------------------",
            "-- Description : ${5:<Description>}",
            "------------------------------------------------------------------------",
            "",
            "$0"
        ],
        "description": "header comment template"
    },
    "Increment": {
        "prefix": "inc",
        "body": [
            "${1:cnt} <= ${1:cnt} + 1;",
            "$0"
        ],
        "description": "increment a signal"
    },
    "Integer": {
        "prefix": "int",
        "body": "integer$0",
        "description": "integer"
    },
    "Library": {
        "prefix": "lib",
        "body": [
            "library $0"
        ],
        "description": "library declaration"
    },
    "Library IEEE": {
        "prefix": [
            "ieee",
            "libieee"
        ],
        "body": [
            "library ieee;",
            "use ieee.std_logic_1164.all;",
            "use ieee.numeric_std.all;",
            "use ieee.math_real.all;",
            "$0"
        ],
        "description": "common IEEE libraries declaration"
    },
    "Library IEEE 2008": {
        "prefix": "lib2008",
        "body": [
            "library ieee;",
            "context ieee.ieee_std_context;",
            "use ieee.math_real.all;",
            "$0"
        ],
        "description": "common IEEE libraries declaration with 2008 standard context (vhdl 2008)"
    },
    "Report": {
        "prefix": "report",
        "body": [
            "report \"${1:<message>}\";",
            "$0"
        ],
        "description": "report statement"
    },
    "Rising Edge": {
        "prefix": "rise",
        "body": "rising_edge(${1:iClk})$0",
        "description": "rising edge"
    },
    "Signal": {
        "prefix": "sigdec",
        "body": [
            "signal ${1:<name>} : ${2:<type>} := ${3:<default_value>};",
            "$0"
        ],
        "description": "signal declaration"
    },
    "Subtype": {
        "prefix": "sub",
        "body": [
            "subtype ${1:<name>} is ${2:<base_type>} range ${3:0} ${4|to,downto|} ${5:<value>};",
            "$0"
        ],
        "description": "subtype declaration"
    },
    "State Processes": {
        "prefix": [
            "statesproc",
            "processstate"
        ],
        "body": [
            "NextStateLogic : process (${1:all})",
            "begin",
            "\t",
            "end process;",
            "",
            "State : process (${2:iClk}, ${3:inRstAsync})",
            "begin",
            "\tif $3 = ${4|'1','0'|} then",
            "\t\t$0",
            "\telsif ${5|rising_edge,falling_edge|}($2) then",
            "\t\t",
            "\tend if;",
            "end process;"
        ],
        "description": "State-NextState-Logic"
    },
    "Unsigned": {
        "prefix": "unsign",
        "body": "unsigned$0",
        "description": "unsigned"
    },
    "Variable": {
        "prefix": "var",
        "body": [
            "variable ${1:<name>} : ${2:<type>} := ${3:<default_value>};",
            "$0"
        ],
        "description": "variable declaration"
    },
    "VHDL Testbench": {
        "prefix": [
            "tb",
            "testbench"
        ],
        "body": [
            "library ieee;",
            "use ieee.std_logic_1164.all;",
            "use ieee.numeric_std.all;",
            "",
            "entity tb_${1:$TM_FILENAME_BASE} is",
            "begin",
            "\t",
            "end tb_$1;",
            "",
            "architecture ${2:Bhv} of tb_$1 is",
            "\t",
            "\t--------------------------------------------------------------------",
            "\t-- ClockFrequency",
            "\t--------------------------------------------------------------------",
            "\tconstant cClkFreq  : natural  := ${3:50E6};",
            "",
            "\t--------------------------------------------------------------------",
            "\t-- component ports",
            "\t--------------------------------------------------------------------",
            "\tsignal Clk       : std_logic  := '1';",
            "\tsignal nRstAsync : std_ulogic := not('1');",
            "\t$0",
            "begin",
            "",
            "\t--------------------------------------------------------------------",
            "\t-- entity instantiation with components",
            "\t-- -> search for \"entity {} - instantiation\"",
            "\t-- -> if right entity not found use the shortcut \"Strg + Alt + S\"",
            "\t--------------------------------------------------------------------",
            "\t",
            "\t",
            "\t--------------------------------------------------------------------",
            "\t-- clock generation",
            "\t--------------------------------------------------------------------",
            "\tClk <= not(Clk) after 1 sec/cClkFreq/2;",
            "",
            "\t--------------------------------------------------------------------",
            "\t-- Testcases",
            "\t--------------------------------------------------------------------",
            "\tTestcase_proc : process",
            "\tbegin",
            "\t\t",
            "\t\t",
            "\t\t",
            "\tend process Testcase_Proc;",
            "",
            "end architecture;"
        ],
        "description": "VHDL testbench template"
    },
    "VHDL Testbench with VUnit": {
        "prefix": [
            "tbvunit",
            "vunit_tb"
        ],
        "body": [
            "library ieee;",
            "use ieee.std_logic_1164.all;",
            "use ieee.numeric_std.all;",
            "",
            "library vunit_lib;",
            "use vunit_lib.vunit_context;",
            "",
            "entity tb_${1:$TM_FILENAME_BASE} is",
            "\t-- used by VUnit",
            "\tgeneric (runner_cfg : string);",
            "end tb_$1;",
            "",
            "architecture ${2:Bhv} of tb_$1 is",
            "\t",
            "\t--------------------------------------------------------------------",
            "\t-- ClockFrequency",
            "\t--------------------------------------------------------------------",
            "\tconstant cClkFreq  : natural  := ${3:50E6};",
            "",
            "\t--------------------------------------------------------------------",
            "\t-- component ports",
            "\t--------------------------------------------------------------------",
            "\tsignal Clk       : std_logic  := '1';",
            "\tsignal nRstAsync : std_ulogic := not('1');",
            "\t$0",
            "begin",
            "",
            "\t--------------------------------------------------------------------",
            "\t-- entity instantiation with components",
            "\t-- -> search for \"entity {} - instantiation\"",
            "\t-- -> if right entity not found use the shortcut \"Strg + Alt + S\"",
            "\t--------------------------------------------------------------------",
            "\t",
            "\t",
            "\t--------------------------------------------------------------------",
            "\t-- clock generation",
            "\t--------------------------------------------------------------------",
            "\tClk <= not(Clk) after 1 sec/cClkFreq/2;",
            "",
            "\t--------------------------------------------------------------------",
            "\t-- waveform generation",
            "\t--------------------------------------------------------------------",
            "\tWaveGen_proc : process",
            "\tbegin",
            "\t\t-- VUnit setup",
            "\t\ttest_runner_setup(runner, runner_cfg);",
            "",
            "\t\t-- loop used to run several VUnit testcases",
            "\t\twhile test_suite loop",
            "\t\t\t-- define one VUnit testcase",
            "\t\t\tif run(\"testcase_1:test1\") then",
            "\t\t\t\t",
            "\t\t\t\t",
            "\t\t\t\t",
            "\t\t\t-- define another VUnit testcase",
            "\t\t\telsif run(\"testcase_2:test2\") then",
            "\t\t\t\t",
            "\t\t\t\t",
            "\t\t\t\t",
            "\t\t\tend if;",
            "\t\tend loop;",
            "",
            "\t\ttest_runner_cleanup(runner);",
            "",
            "\tend process WaveGen_Proc;",
            "",
            "end architecture;"
        ],
        "description": "VHDL testbench VUnit template"
    },
    "Wait for": {
        "prefix": "waitf",
        "body": [
            "wait for ${1:10ns};",
            "$0"
        ],
        "description": "wait for"
    },
    "Wait on": {
        "prefix": "waito",
        "body": [
            "wait on ${1:clk};",
            "$0"
        ],
        "description": "wait on"
    },
    "Wait until": {
        "prefix": "waitu",
        "body": [
            "wait until ${1:clk = '1'};",
            "$0"
        ],
        "description": "wait until"
    }   
}